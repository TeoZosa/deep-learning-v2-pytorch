[tool.poetry]
name = "deep-learning-v2-pytorch"
version = "0.0.0"
description = "Deep Learning v2 PyTorch"
authors = ["Teo Zosa <teo@sonosim.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TeoZosa/deep-learning-v2-pytorch"
homepage = "https://github.com/TeoZosa/deep-learning-v2-pytorch"
include = ["deep_learning_v2_pytorch/py.typed"]
keywords = []
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
]

[tool.poetry.urls]
Changelog = "https://github.com/TeoZosa/deep-learning-v2-pytorch/releases"

[tool.poetry.dependencies]
python = "^3.9"
bokeh = "^2.3.1"
jupyter = "^1.0.0"
keras = "^2.4.3"
matplotlib = "^3.4.1"
opencv-python = "^4.5.2"
pandas = "^1.2.5"
scikit-image = "^0.18.1"
scikit-learn = "^0.24.2"
seaborn = "^0.11.1"
torch = "^1.8.1"
torchvision = "^0.9.1"
tqdm = "^4.61.1"
tensorflow = "^2.5.0rc3"

# Documentation
importlib-metadata = "^4.11.2"
myst-parser = { version = "^0.15.1", optional = true}
pygments = { version = "^2.8.1", optional = true}
python-dotenv = "^0.18.0"
sphinx = { version = "^3.5.4", optional = true}
sphinx-autodoc-typehints = { version = "^1.12.0", optional = true}
sphinx-rtd-theme = { version = "^0.5.1", optional = true}
sphinxcontrib-apidoc = { version = "^0.3.0", optional = true}
sphinxcontrib-confluencebuilder = { version = "^1.5.0", optional = true}

[tool.poetry.dev-dependencies]
# Testing
nbqa = "^0.13.1"
pytest = "^6.2.1"
pytest-cov = "^2.12.1"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.6.0"
pytest-sugar = "^0.9.4"
pytest-xdist = "^2.3.0"
xdoctest = {extras = ["all"], version = "^0.15.4"}
tox = "^3.21.4"
tox-gh-actions = "^2.3.0"
# Code formatter
# see: https://black.readthedocs.io/en/stable/editor_integration.html
black = "^21.4b2"
# Linters
flakehell = "^0.9.0"
pylint = "^2.8.3"
# Static type checker
mypy = "^0.812"
# Linting & formatting orchestrator
pre-commit = "^2.13.0"

# Documentation
darglint = "^1.5.8"
nodeenv = "^1.5.0" # ADR documentation Node dependency

[tool.poetry.extras]
docs = [
    "importlib-metadata",
    "myst-parser",
    "pygments",
    "python-dotenv",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-confluencebuilder",
]

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["deep_learning_v2_pytorch"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 0
show_missing = true
skip_covered = true

[tool.flakehell]
# specify any flake8 options
exclude = [".*"] # Ignore dotfiles
# make output nice
format = "grouped"
# show line of source code in output
show_source = true
# temporary fix for flake8 version 3.9.1 compatibility
extended_default_ignore=[]  # see https://github.com/flakehell/flakehell/issues/10

# list of plugins and rules for them
[tool.flakehell.plugins]
# cyclomatic complexity (https://github.com/PyCQA/mccabe)
mccabe = ["+*"]
# include everything in pyflakes except F401
pyflakes = ["+*", "-F401"]
# include everything in pycodestyle except what Black covers
pycodestyle = ["+*",
    "-E203", # Whitespace before ":"
    "-E501", # Line too long (82 > 78 characters)
    "-W503"  # Line break occurred before a binary operator <- this is now considered best practice by PEP 8
]

[tool.isort]
profile = "black"
atomic = true
combine_as_imports = true

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "bad-continuation",
  "c-extension-no-member",
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--emoji"]
xfail_strict = "true"
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
